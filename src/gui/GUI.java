/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import client.Client;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author simon
 */
public class GUI extends javax.swing.JFrame implements Observer {

    Client theClient;

    static String userName;
    static String ip;
    static int port;

    static StyledDocument doc;

    static Style boldBlue;
    static Style normalBlack;
    static Style italicPurple;
    static Style boldBrown;
    static Style boldBlack;
    static Style gray;

    static DefaultListModel listModel = new DefaultListModel();

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        boldBlue = jTextPane1.addStyle("Im a bold blue Style", null);
        normalBlack = jTextPane1.addStyle("Im a normal black Style", null);
        italicPurple = jTextPane1.addStyle("Im a italic purple Style", null);
        boldBlack = jTextPane1.addStyle("Im a bold black Style", null);
        gray = jTextPane1.addStyle("Im a grey Style", null);

        doc = jTextPane1.getStyledDocument();

        StyleConstants.setForeground(boldBlue, Color.BLUE);
        StyleConstants.setBold(boldBlue, true);

        StyleConstants.setForeground(normalBlack, Color.BLACK);
        StyleConstants.setItalic(normalBlack, true);

        StyleConstants.setForeground(italicPurple, new Color(102, 0, 102));
        StyleConstants.setBold(italicPurple, true);

        StyleConstants.setForeground(boldBlack, Color.BLACK);
        StyleConstants.setBold(boldBlack, true);

        StyleConstants.setForeground(gray, Color.GRAY);

        jTextPane1.setEditable(false);

        boolean connectionOK = false;

        if (userName == null) {

            userName = JOptionPane.showInputDialog("Please enter your user name:");
            if (userName == null) {
                System.exit(1);
            }

        }

        theClient = new Client();
        String tmpPort = null;
        do {
            if (ip == null) {

                ip = JOptionPane.showInputDialog("Please enter the server's ip address:");


            }

            if (port == -1) {
                tmpPort = JOptionPane.showInputDialog("Please enter the server's port:");
              
                try {
                    port = Integer.parseInt(tmpPort);

                } catch (NumberFormatException e) {
                    port = -1;
                }
            }

            try {
                theClient.connect(ip, port);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Bad host and / or port!");
                ip = null;
                port = -1;
                tmpPort = null;
                
                

            }
            
            if (port != -1 && ip != null && tmpPort != null) {
                break;
                
            }
        } while (true);

        theClient.addObserver(this);

        theClient.startNotifier();
        jLabel4.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        jLabel4.setText(userName);
        theClient.send("USER#" + userName);
        String responseText = "";

        String tokens[] = responseText.split("#");

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                try {
                    theClient.stop();
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        jTextField1.requestFocus();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTextPane1);

        jList1.setModel(listModel);
        jScrollPane2.setViewportView(jList1);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("CHAT ROOM");

        jLabel2.setText("Enter message and press Enter or press Send");

        jLabel3.setText("User logged in");

        jLabel5.setText("Select/Deselect users with CTRL+click (default is send to ALL)");

        jLabel6.setText("Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        send();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        send();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void send() {
        String theText = jTextField1.getText();
        theClient.send(theText);

        String receivers = "ALL";

        if (!theText.equals("")) {

            List<String> selectedUsers = jList1.getSelectedValuesList();
            // if none is selected - just assume we want to send the message to everybody
            if (selectedUsers.isEmpty()) {
                theClient.send("MSG#*#" + theText);
            } else {
                receivers = "";
                String sendString = "MSG#";
                for (String user : selectedUsers) {
                    sendString += user + ",";

                }
                // get rid of the last ,
                sendString = sendString.substring(0, sendString.length() - 1);
                receivers = sendString.split("#")[1];
                sendString = sendString + "#" + theText;

                theClient.send(sendString);
            }

            // insert the user's message to his own window
            try {
                doc.insertString(doc.getLength(), "(" + userName, italicPurple);
                doc.insertString(doc.getLength(), " to " + receivers, gray);
                doc.insertString(doc.getLength(), "): ", italicPurple);
                doc.insertString(doc.getLength(), theText + "\n", boldBlack);
            } catch (BadLocationException e) {

            }

            jTextField1.setText("");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        port = -1;
        ip = null;
        userName = null;
        switch (args.length) {
            case 3:
                userName = args[2];
            case 2:
                port = Integer.parseInt(args[0]);
                ip = args[1];

                break;
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {

        String responseText = (String) arg;
        String tokens[] = responseText.split("#");

        String display = "";

        if (tokens[0].equals("USERLIST")) {
            String userNames[] = tokens[1].split(",");
            listModel.clear();

            for (String userName : userNames) {

                listModel.addElement(userName);

            }

        }
        if (tokens[0].equals("MSG")) {

            // we only want it displayed if it is not coming from ourselves!
            if (!tokens[1].equals(userName)) {
                try {
                    doc.insertString(doc.getLength(), "(" + tokens[1] + "): ", normalBlack);
                    doc.insertString(doc.getLength(), tokens[2] + "\n", normalBlack);
                } catch (BadLocationException e) {
                }
            }

        }

    }
}
